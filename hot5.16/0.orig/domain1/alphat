/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1912                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0/air";
    object      alphat;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [1 -1 -1 0 0 0 0];

internalField   uniform 0;

boundaryField
{
     ".*"
    {
        type            calculated;
        value           uniform 0;
    }
	".*_inlet"
	{
	   type            calculated;
        value           uniform 0;
	}
	/*".*_outlet"
	{
	   type            calculated;
        value           uniform 0;
	}*/
	
	window_outlet
	    {
		type            mappedField;
		sampleMode      nearestPatchFace;
		samplePatch 	window_outlet;
		sampleRegion    atrium;
		//offsetMode 		uniform;
		//offset  		(0 0 0);
		//interpolationScheme  cell;
        field           alphat;              // optional field name
        setAverage      no;             // apply an average value
        average         0;              // average to apply if setAverage
        value           uniform  0;		// place holder
		//inletValue      uniform  0;
		//Prt             0.85; 
    }
		building_outlet
	    {
		type            mappedField;
		sampleMode      nearestPatchFace;
		samplePatch 	building_outlet;
		sampleRegion    building;
		//offsetMode 		uniform;
		//offset  		(0 0 0);
		//interpolationScheme  cell;
        field           alphat;              // optional field name
        setAverage      no;             // apply an average value
        average         0;              // average to apply if setAverage
        value           uniform  0;		// place holder
		//inletValue      uniform  0;
		//Prt             0.85; 
    }
	
	glass
    {
        type            compressible::alphatWallFunction;
        Prt             0.85;
        value           uniform 0;
    }
	surround
    {
        type            compressible::alphatWallFunction;
        Prt             0.85;
        value           uniform 0;
    }
	
	 domain1_to_building
    {
        type            compressible::alphatWallFunction;
        Prt             0.85;
        value           uniform 0;
    }
	 domain1_to_atrium
    {
        type            compressible::alphatWallFunction;
        Prt             0.85;
        value           uniform 0;
    }
	 domain1_to_floor
    {
        type            compressible::alphatWallFunction;
        Prt             0.85;
        value           uniform 0;
    }

}


// ************************************************************************* //
